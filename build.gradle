buildscript {
    ext.kotlin_version = '1.3.31'
    repositories { jcenter() }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id 'org.springframework.boot' version '2.1.5.RELEASE'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.31'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'war'
apply plugin: 'docker'

group 'dev.bmac.github'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

tasks.withType(Test) {
    useJUnitPlatform()
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-mustache'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: '*' , module: "junit"
    }
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation 'org.mockito:mockito-junit-jupiter:2.27.0'

    implementation 'com.squareup.okhttp3:okhttp:3.14.1'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.0"

    implementation 'org.bouncycastle:bcpg-jdk15on:1.61'
    implementation "io.lettuce:lettuce-core:5.1.6.RELEASE"
    implementation "ai.grakn:redis-mock:0.1.6"

    testImplementation 'net.sourceforge.htmlunit:htmlunit:2.35.0'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task copyJar(type: Copy) {
    dependsOn   'bootJar'
    from        "build/libs/github-initializer-${project.version}.jar"
    into        'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}
// write this docker build task, this will run just after "./gradlew build" command
task buildDocker(type: Docker, dependsOn: [copyJar]) {
    push = false
    applicationName = bootJar.baseName
    dockerfile = file('Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

build.dependsOn buildDocker